import { Formik, Form, ErrorMessage, useFormikContext, Field } from 'formik';
import {
  Button,
  IconButton,
  TextField,
  MenuItem,
  CircularProgress,
} from '@mui/material';
import { useState } from 'react';
import { withErrorBoundary } from 'react-error-boundary';
import { ErrorHandler } from '~shared/ui/error';
import { userQueries } from '~entities/user';

const initialUser = {
  email: '',
  firstName: '',
  lastName: '',
  password: '',
  rePassword: '',
  birthdate: '',
  phoneModels: [],
};

function RegisterPageComponent() {
  const [visibility, setVisibility] = useState(false);
  const handleClickShowPassword = () => setVisibility((prev) => !prev);

  const {
    mutate: registerUser,
    isPending,
    isSuccess,
  } = userQueries.useRegisterMutation();
  const { data: models, isLoading, isError } = userQueries.useGetPhoneModels();

  if (isLoading)
    return (
      <div className="flex justify-center items-center h-screen">
        <p className="text-lg text-gray-500">–ó–∞–≥—Ä—É–∑–∫–∞...</p>
      </div>
    );

  if (isError)
    return (
      <div className="flex justify-center items-center h-screen">
        <p className="text-lg text-red-500">
          –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤...
        </p>
      </div>
    );

  if (isSuccess)
    return (
      <div className="flex justify-center items-center h-screen">
        <div className="bg-green-100 text-green-800 px-6 py-4 rounded-md shadow-md">
          <p className="text-lg font-semibold">
            –ù–∞ –≤–∞—à—É –ø–æ—á—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–∏—Å—å–º–æ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
          </p>
        </div>
      </div>
    );

  return (
    <div className="w-[380px] mx-auto rounded-md px-5 py-7">
      <h1 className="font-bold text-2xl text-pc-500">–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</h1>
      <Formik
        initialValues={initialUser}
        validate={validateForm}
        onSubmit={(user) => registerUser({ user })}
        validateOnMount={true}
      >
        {({ values, setFieldValue }) => (
          <Form className="flex flex-col ">
            <CustomField name="email" label="Email" type="email" />
            <CustomField name="firstName" label="–ò–º—è" />
            <CustomField name="lastName" label="–§–∞–º–∏–ª–∏—è" />
            <div>
              <p className="text-sm">–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è</p>
              <CustomField name="birthdate" type="date" />
            </div>
            <CustomField
              name="password"
              label="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
              type={visibility ? 'text' : 'password'}
              endAdornment={
                <IconButton onClick={handleClickShowPassword}>
                  {visibility ? 'üôà' : 'üëÅÔ∏è'}
                </IconButton>
              }
            />
            <CustomField
              name="rePassword"
              label="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
              type={visibility ? 'text' : 'password'}
            />
            <TextField
              select
              fullWidth
              label="–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
              value={values.phoneModels.length > 0 ? values.phoneModels[0] : ''}
              onChange={(event) =>
                setFieldValue('phoneModels', [event.target.value])
              }
              variant="outlined"
            >
              <MenuItem value="" disabled>
                –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å —Ç–µ–ª–µ—Ñ–æ–Ω–∞
              </MenuItem>
              {models?.data?.map((model) => (
                <MenuItem key={model.id} value={model.id}>
                  {model.brand} {model.modelName}
                </MenuItem>
              ))}
            </TextField>
            <ErrorMessage
              name="phoneModels"
              component="div"
              className="text-xs text-[red]"
            />
            {!isPending ? (
              <SubmitButton />
            ) : (
              <div className="flex justify-center gap-2 border mt-3 items-center p-2 border-[gray]/50 rounded">
                <CircularProgress className="h-[20px] text-[gray]" />
                <p className="text-[gray]">–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</p>
              </div>
            )}
          </Form>
        )}
      </Formik>
    </div>
  );
}

function CustomField({ name, label, type = 'text', endAdornment }) {
  return (
    <div className="mb-4">
      <Field
        as={TextField}
        fullWidth
        id={name}
        name={name}
        label={label}
        type={type}
        size="small"
        InputProps={{ endAdornment }}
      />
      <ErrorMessage
        name={name}
        component="div"
        className="text-xs text-[red]"
      />
    </div>
  );
}

function SubmitButton() {
  const { isValidating, isValid } = useFormikContext();
  return (
    <Button
      className="mt-3"
      variant="contained"
      type="submit"
      fullWidth
      disabled={!isValid}
    >
      –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
    </Button>
  );
}

const validateForm = (values) => {
  const errors = {};
  if (!values.email) errors.email = '–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ';
  if (!values.firstName) errors.firstName = '–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ';
  if (!values.lastName) errors.lastName = '–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ';
  if (!values.password || values.password.length < 6)
    errors.password = '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤';
  if (values.password !== values.rePassword)
    errors.rePassword = '–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç';
  if (!values.birthdate) errors.birthdate = '–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ';
  if (!values.phoneModels.length)
    errors.phoneModels = '–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –º–æ–¥–µ–ª—å';
  return errors;
};

export const RegisterPage = withErrorBoundary(RegisterPageComponent, {
  fallbackRender: ({ error }) => <ErrorHandler error={error} />,
});
